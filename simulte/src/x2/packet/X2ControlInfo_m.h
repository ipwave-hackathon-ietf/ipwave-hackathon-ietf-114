//
// Generated file, do not edit! Created by nedtool 5.4 from x2/packet/X2ControlInfo.msg.
//

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#ifndef __X2CONTROLINFO_M_H
#define __X2CONTROLINFO_M_H

#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0504
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif



// cplusplus {{
    #include "common/LteCommon.h"
    typedef std::list<X2NodeId> DestinationIdList;
// }}

/**
 * Class generated from <tt>x2/packet/X2ControlInfo.msg:38</tt> by nedtool.
 * <pre>
 * //
 * // \@class LteX2ControlInfo
 * //
 * // This class contains:
 * // - Source X2 ID
 * // - List of destionation IDs
 * // - init flag
 * //
 * class X2ControlInfo
 * {
 *     uint16 sourceId;                          // Source X2NodeId
 *     DestinationIdList destIdList;             // List of destination X2NodeId
 * 
 *     bool init = false;
 * }
 * </pre>
 */
class X2ControlInfo : public ::omnetpp::cObject
{
  protected:
    uint16_t sourceId;
    DestinationIdList destIdList;
    bool init;

  private:
    void copy(const X2ControlInfo& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const X2ControlInfo&);

  public:
    X2ControlInfo();
    X2ControlInfo(const X2ControlInfo& other);
    virtual ~X2ControlInfo();
    X2ControlInfo& operator=(const X2ControlInfo& other);
    virtual X2ControlInfo *dup() const override {return new X2ControlInfo(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual uint16_t getSourceId() const;
    virtual void setSourceId(uint16_t sourceId);
    virtual DestinationIdList& getDestIdList();
    virtual const DestinationIdList& getDestIdList() const {return const_cast<X2ControlInfo*>(this)->getDestIdList();}
    virtual void setDestIdList(const DestinationIdList& destIdList);
    virtual bool getInit() const;
    virtual void setInit(bool init);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const X2ControlInfo& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, X2ControlInfo& obj) {obj.parsimUnpack(b);}


#endif // ifndef __X2CONTROLINFO_M_H

