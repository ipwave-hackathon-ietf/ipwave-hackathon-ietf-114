//
// Generated file, do not edit! Created by nedtool 5.4 from stack/rlc/am/packet/LteRlcAmPdu.msg.
//

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#ifndef __LTERLCAMPDU_M_H
#define __LTERLCAMPDU_M_H

#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0504
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif



// cplusplus {{
#include "stack/rlc/packet/LteRlcPdu.h"
#include "stack/rlc/LteRlcDefs.h"
// }}

/**
 * Class generated from <tt>stack/rlc/am/packet/LteRlcAmPdu.msg:30</tt> by nedtool.
 * <pre>
 * packet LteRlcAmPdu extends LteRlcPdu
 * {
 *     \@customize(true);
 *     unsigned short amType \@enum(LteAmType);
 *     unsigned short txNumber;
 *     int firstSn;
 *     int lastSn;
 *     abstract bool bitmap[];
 * }
 * </pre>
 *
 * LteRlcAmPdu_Base is only useful if it gets subclassed, and LteRlcAmPdu is derived from it.
 * The minimum code to be written for LteRlcAmPdu is the following:
 *
 * <pre>
 * class LteRlcAmPdu : public LteRlcAmPdu_Base
 * {
 *   private:
 *     void copy(const LteRlcAmPdu& other) { ... }

 *   public:
 *     LteRlcAmPdu(const char *name=nullptr, short kind=0) : LteRlcAmPdu_Base(name,kind) {}
 *     LteRlcAmPdu(const LteRlcAmPdu& other) : LteRlcAmPdu_Base(other) {copy(other);}
 *     LteRlcAmPdu& operator=(const LteRlcAmPdu& other) {if (this==&other) return *this; LteRlcAmPdu_Base::operator=(other); copy(other); return *this;}
 *     virtual LteRlcAmPdu *dup() const override {return new LteRlcAmPdu(*this);}
 *     // ADD CODE HERE to redefine and implement pure virtual functions from LteRlcAmPdu_Base
 * };
 * </pre>
 *
 * The following should go into a .cc (.cpp) file:
 *
 * <pre>
 * Register_Class(LteRlcAmPdu)
 * </pre>
 */
class LteRlcAmPdu_Base : public ::LteRlcPdu
{
  protected:
    unsigned short amType;
    unsigned short txNumber;
    int firstSn;
    int lastSn;

  private:
    void copy(const LteRlcAmPdu_Base& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const LteRlcAmPdu_Base&);
    // make constructors protected to avoid instantiation
    LteRlcAmPdu_Base(const char *name=nullptr, short kind=0);
    LteRlcAmPdu_Base(const LteRlcAmPdu_Base& other);
    // make assignment operator protected to force the user override it
    LteRlcAmPdu_Base& operator=(const LteRlcAmPdu_Base& other);

  public:
    virtual ~LteRlcAmPdu_Base();
    virtual LteRlcAmPdu_Base *dup() const override {throw omnetpp::cRuntimeError("You forgot to manually add a dup() function to class LteRlcAmPdu");}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual unsigned short getAmType() const;
    virtual void setAmType(unsigned short amType);
    virtual unsigned short getTxNumber() const;
    virtual void setTxNumber(unsigned short txNumber);
    virtual int getFirstSn() const;
    virtual void setFirstSn(int firstSn);
    virtual int getLastSn() const;
    virtual void setLastSn(int lastSn);
    virtual void setBitmapArraySize(unsigned int size) = 0;
    virtual unsigned int getBitmapArraySize() const = 0;
    virtual bool getBitmap(unsigned int k) const = 0;
    virtual void setBitmap(unsigned int k, bool bitmap) = 0;
};


#endif // ifndef __LTERLCAMPDU_M_H

