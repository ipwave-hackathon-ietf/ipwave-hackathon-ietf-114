//
// Generated file, do not edit! Created by nedtool 5.4 from stack/d2dModeSelection/D2DModeSwitchNotification.msg.
//

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#ifndef __D2DMODESWITCHNOTIFICATION_M_H
#define __D2DMODESWITCHNOTIFICATION_M_H

#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0504
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif



// cplusplus {{
#include "common/LteCommon.h"
// }}

/**
 * Class generated from <tt>stack/d2dModeSelection/D2DModeSwitchNotification.msg:17</tt> by nedtool.
 * <pre>
 * packet D2DModeSwitchNotification
 * {
 *     unsigned int peerId;
 *     bool txSide;
 *     LteD2DMode oldMode;
 *     LteD2DMode newMode;
 *     bool oldConnection;
 * }
 * </pre>
 */
class D2DModeSwitchNotification : public ::omnetpp::cPacket
{
  protected:
    unsigned int peerId;
    bool txSide;
    LteD2DMode oldMode;
    LteD2DMode newMode;
    bool oldConnection;

  private:
    void copy(const D2DModeSwitchNotification& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const D2DModeSwitchNotification&);

  public:
    D2DModeSwitchNotification(const char *name=nullptr, short kind=0);
    D2DModeSwitchNotification(const D2DModeSwitchNotification& other);
    virtual ~D2DModeSwitchNotification();
    D2DModeSwitchNotification& operator=(const D2DModeSwitchNotification& other);
    virtual D2DModeSwitchNotification *dup() const override {return new D2DModeSwitchNotification(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual unsigned int getPeerId() const;
    virtual void setPeerId(unsigned int peerId);
    virtual bool getTxSide() const;
    virtual void setTxSide(bool txSide);
    virtual LteD2DMode& getOldMode();
    virtual const LteD2DMode& getOldMode() const {return const_cast<D2DModeSwitchNotification*>(this)->getOldMode();}
    virtual void setOldMode(const LteD2DMode& oldMode);
    virtual LteD2DMode& getNewMode();
    virtual const LteD2DMode& getNewMode() const {return const_cast<D2DModeSwitchNotification*>(this)->getNewMode();}
    virtual void setNewMode(const LteD2DMode& newMode);
    virtual bool getOldConnection() const;
    virtual void setOldConnection(bool oldConnection);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const D2DModeSwitchNotification& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, D2DModeSwitchNotification& obj) {obj.parsimUnpack(b);}


#endif // ifndef __D2DMODESWITCHNOTIFICATION_M_H

